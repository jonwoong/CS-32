1a.
Insertion of 80:
=====================================
					50
					/\		
				  20  60
				  /\    \
			    10  40	 70
					/	  \
			      30	   80
Insertion of 65:
=====================================
					 50
					/  \		
				  20    60
				  /\      \
			    10  40	   70
					/	  /  \
			      30	  65  80
Insertion of 75:
=====================================
					 50
					/  \		
				  20    60
				  /\      \
			    10  40	   70
					/	  /  \
			      30	  65  80
							  /
							75
Insertion of 45:
=====================================
					 50
					/  \		
				  20    60
				  /\      \
			    10  40	   70
					/ \    /  \
			      30  45  65  80
Insertion of 35:
=====================================
					 50
					/  \		
				  20    60
				  /\      \
			    10  40	   70
					/ \    /  \
			      30  45  65  80
					\
					35
Insertion of 25:
=====================================
					 50
					/  \		
				  20    60
				  /\      \
			    10  40	   70
					/ \    /  \
			      30  45  65  80
				 / \
				25	35
1b. 
Removing node 30:
=====================================
					 50
					/  \		
				  20    60
				  /\      \
			    10  40	   70
					/ \    /  \
			       35  45  65  80
Removing node 20:
=====================================
					 50
					/  \		
				  40    60
				  /\      \
			    10  45	   70
					/     /  \
			       35    65  80
1c. 
=====================================
					 50
					/  \		
				  20    60
				  /\      \
			    10  40	   70
					/ \    /  \
			      30  45  65  80
				 / \
				25	35
Inorder traversal: 10, 20, 25, 30, 40, 35, 45, 50, 65, 70, 60, 80
Preorder Traversal: 50, 20, 10, 40, 30, 45, 25, 35, 60, 70, 65, 80
Postorder Traversal: 10, 25, 35, 30, 45, 40, 20, 65, 80, 70, 60, 50

2a.			6
			/\
		   3  5
		  /\  /
		 1  2 4
2b. 6, 3, 5, 1, 2, 4
2c. 5, 3, 4, 1, 2

3a. 
class binaryTreeNode
{
	public:
		binaryTreeNode* leftChild;
		binaryTreeNode* rightChild;
		binaryTreeNode* parentNode;
		int m_data;
};
3b. void insertNode(binaryTreeNode* pointerToRoot, binaryTreeNode nodeToInsert)
{
	if (pointerToRoot is NULL)
	{
		initialize nodeToInsert;
		pointerToRoot points to nodeToInsert;
		set nodeToInsert's data value;
		set pointers to NULL;
	}
	else if (nodeToInsert's data member < existing node's data member)
	{
		insert as a left child;
	}
	else
	{
		insert as a right child;
	}
}

4a. 

	A	B	C	D	E	F	G	H	I
A	0	0	0	0	0	0	0	0	0						
B	1	0	0	1	0	0	0	0	0
C	1	0	0	0	0	0	1	0	1
D	0	0	1	0	0	0	0	0	0
E	0	0	1	0	0	0	0	0	0
F	0	0	0	0	0	0	0	0	0
G	0	0	0	0	1	1	0	1	0
H	0	1	0	1	0	0	1	0	0
I	0	0	0	0	0	1	0	0	0

A->B,C
B->H
C->D,E
D->B,H
E->G
F->G,I
G->C,H
H->G
I->C

Depth-first traversal: E, G, C, D, B, H, A, F, I

		  
